---
AWSTemplateFormatVersion: 2010-09-09

Description: >
    This template deploys specific resources for Products for the Retail Demo Store Services.
    Author: Bastien Leblanc <bastil@amazon.co.uk>

Parameters:
  ResourceBucket:
    Type: String

  ResourceBucketRelativePath:
    Type: String

  ProductsTable:
    Type: String

  ProductsTableStreamArn:
    Type: String

  CategoriesTable:
    Type: String

Resources:

  LoadDataLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument: 
        Version: 2012-10-17
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
      Policies:
        - PolicyName: DynamoDB
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:DescribeTable
                  - dynamodb:PutItem
                Resource:
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${ProductsTable}'
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${CategoriesTable}'
        - PolicyName: S3
          PolicyDocument:
            Version: '2012-10-17'
            Statement:                  
              - Effect: Allow
                Action:
                  - s3:GetObject 
                Resource: 
                  !Sub 
                    - 'arn:aws:s3:::${Bucket}/*'
                    - { Bucket: !Ref ResourceBucket }
        - PolicyName: CloudWatch
          PolicyDocument:
            Version: '2012-10-17'
            Statement:                    
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:PutLogEvents
                  - logs:CreateLogStream
                Resource: "arn:aws:logs:*:*:*"

  DyanmoDBNeptuneSyncRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/NeptuneFullAccess
        - arn:aws:iam::aws:policy/AWSLambdaInvocation-DynamoDB
      Policies:
        - PolicyName: DynamoDB
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:BatchGetItem
                  - dynamodb:Scan
                  - dynamodb:Query
                  - dynamodb:ConditionCheckItem
                Resource:
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${ProductsTable}'
        - PolicyName: CloudWatch
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:PutLogEvents
                  - logs:CreateLogStream
                Resource: "arn:aws:logs:*:*:*"

  LoadDataLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: 'Retail Demo Store deployment utility function that loads product and category information into DynamoDB tables'
      Handler: 'main'
      Role: !GetAtt LoadDataLambdaRole.Arn
      Runtime: go1.x
      Timeout: 900
      Code:
        S3Bucket: !Ref ResourceBucket
        S3Key: !Sub '${ResourceBucketRelativePath}aws-lambda/retaildemostore-lambda-load-products.zip'

  NeptuneCluster:
    Type: AWS::Neptune::DBCluster
    Properties:
      AvailabilityZones:
        - !Select [ 0, !GetAZs ]
      DBClusterIdentifier: retail-demo-store-neptune-cluster
      EngineVersion: 1.1.1.0

  NeptuneDBInstance:
    Type: AWS::Neptune::DBInstance
    Properties:
      DBClusterIdentifier: !Ref NeptuneCluster
      DBInstanceClass: db.t3.medium

  LoadNeptuneFromDDBProducts:
    Type: AWS::Lambda::Function
    Properties:
      Description: 'Retail Demo Store deployment utility function that exports all products from DynamoDB products table to Neptune DB instance'
      Handler: load-neptune-from-ddb-products.lambda_handler
      Role: !GetAtt DyanmoDBNeptuneSyncRole.Arn
      Runtime: python3.8
      Timeout: 3
      Code:
        S3Bucket: !Ref ResourceBucket
        S3Key: !Sub '${ResourceBucketRelativePath}aws-lambda/load-neptune-from-ddb-products.zip'
      Environment:
        Variables:
          dynamodb_table: !Ref ProductsTable
          neptune_endpoint: !Ref NeptuneDBInstance

  DynamoDBNeptuneSync:
    Type: AWS::Lambda::Function
    Properties:
      Description: 'Retail Demo Store function to sync Neptune with DynamoDB after product records change'
      Handler: dynamodb-neptune-sync.lambda_handler
      Role: !GetAtt DyanmoDBNeptuneSyncRole.Arn
      Runtime: python3.8
      Timeout: 3
      Code:
        S3Bucket: !Ref ResourceBucket
        S3Key: !Sub '${ResourceBucketRelativePath}aws-lambda/dynamodb-neptune-sync.zip'
      Environment:
        Variables:
          neptune_endpoint: !Ref NeptuneDBInstance
    DependsOn: CustomLoadNeptuneFromDDB

  DynamoDBTableStream:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 100
      Enabled: True
      EventSourceArn: !Ref ProductsTableStreamArn
      FunctionName: !GetAtt DynamoDBNeptuneSync.Arn
      StartingPosition: LATEST

  CustomLoadDataProducts:
    Type: Custom::CustomLoadData
    Properties:
      ServiceToken: !GetAtt LoadDataLambdaFunction.Arn
      Bucket: !Ref ResourceBucket
      File: !Sub '${ResourceBucketRelativePath}data/products.yaml'
      Table: !Ref ProductsTable
      Datatype: "products"

  CustomLoadDataCategories:
    Type: Custom::CustomLoadData
    Properties:
      ServiceToken: !GetAtt LoadDataLambdaFunction.Arn
      Bucket: !Ref ResourceBucket
      File: !Join [ '', [ !Ref ResourceBucketRelativePath, 'data/categories.yaml' ] ]
      Table: !Ref CategoriesTable
      Datatype: "categories"

  CustomLoadNeptuneFromDDB:
    Type: Custom::CustomLoadData
    Properties:
      ServiceToken: !GetAtt LoadNeptuneFromDDBProducts.Arn
    DependsOn: LoadDataLambdaFunction

Outputs:
  LoadDataLambdaFunction:
    Value: !Ref LoadDataLambdaFunction
